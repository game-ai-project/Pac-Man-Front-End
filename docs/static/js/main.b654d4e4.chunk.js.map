{"version":3,"sources":["TwitchView.js","VoiceComponent.js","App.js","reportWebVitals.js","index.js"],"names":["TwitchView","isMuted","channel","width","height","muted","hideControls","parent","MySwal","withReactContent","Swal","VoiceButton","lang","useState","isListening","setIsListening","isProcessing","setIsProcessing","window","SpeechRecognition","webkitSpeechRecognition","recognizer","useEffect","onend","onresult","event","text","results","transcript","console","log","fetch","method","headers","body","JSON","stringify","message","response","json","data","fire","title","icon","html","disabled","onClick","start","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"8MAaeA,EAXI,SAAH,OAAMC,EAAO,EAAPA,QAAO,OAC5B,cAAC,IAAY,CACZC,QAAQ,eACRC,MAAM,OACNC,OAAO,OACPC,MAAOJ,EACPK,cAAc,EACdC,OAAQ,CAAC,cACR,E,wCCFGC,E,MAASC,GAAiBC,KA+EjBC,EA7EK,SAAH,GAA4B,IAAD,IAArBC,YAAI,MAAG,QAAO,EACpC,EAAsCC,oBAAS,GAAM,mBAA9CC,EAAW,KAAEC,EAAc,KAClC,EAAwCF,oBAAS,GAAM,mBAAhDG,EAAY,KAAEC,EAAe,KAEpC,EAAqBJ,mBACnBK,OAAOC,mBAAqB,IAAID,OAAOC,mBACtCD,OAAOE,yBAA2B,IAAIF,OAAOE,yBAFzCC,EAGN,iBAHgB,GAKjBC,qBAAU,WACTD,EAAWE,MAAQ,WAClBR,GAAe,EAChB,EAEAM,EAAWG,SAAQ,iDAAG,WAAOC,GAAK,qFAIX,OAHhBC,EAAOD,EAAME,QAAQ,GAAG,GAAGC,WACjCC,QAAQC,IAAI,oBAAD,OAAqBJ,IAEhCT,GAAgB,GAAM,kBAEEc,MAvBN,uCAuB0B,CAC1CC,OAAQ,OACRC,QAAS,CACR,eAAgB,oBAEjBC,KAAMC,KAAKC,UAAU,CACpBC,QAASX,MAER,KAAD,EARY,OAARY,EAAQ,gBASKA,EAASC,OAAO,KAAD,EAA5BC,EAAI,OACVhC,EAAOiC,KAAK,CACXC,MAAO,4BAAG,2CACVC,KAAM,UACNC,KAAK,aAAD,OAAelB,EAAI,WAExBG,QAAQC,IAAIU,GAAM,kDAElBhC,EAAOiC,KAAK,CACXC,MAAO,4BAAG,kDACVC,KAAM,QACNC,KAAK,aAAD,OAAelB,EAAI,WAExBG,QAAQC,IAAI,EAAD,IAAM,QAEM,OAFN,UAEjBb,GAAgB,GAAO,6EAExB,mDAhCkB,EAiCpB,GAAG,CAACI,IAUJ,OACC,8BACC,wBACCwB,SAAU/B,GAAeE,EACzB8B,QAZiB,YACC,IAAhBhC,IACHC,GAAe,GACfM,EAAWT,KAAOA,EAClBS,EAAW0B,QAEb,EAOGC,UACClC,GAAeE,EACZ,yBACA,gBACH,SAEAF,EACE,eACAE,EACA,gBACA,YAIP,EChDeiC,EAhCH,WACX,MAAkBpC,oBAAS,GAApBZ,EAAyB,iBAAlB,GAEd,OACC,sBAAK+C,UAAU,MAAK,UACnB,qBAAKA,UAAU,cAAa,SAC3B,cAAC,EAAU,CAAC/C,QAASA,MAGtB,sBAAK+C,UAAU,iBAAgB,UAC9B,sBAAKA,UAAU,cAAa,UAC3B,qBAAKA,UAAU,sBACf,qBAAKA,UAAU,oBAAmB,SACjC,4BAAG,kBAEJ,4BAAG,wIAIH,8BAAG,aACQ,4BAAG,aAAY,2DAI3B,qBAAKA,UAAU,SAAQ,SACtB,cAAC,EAAW,WAKjB,ECxBeE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJaQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,OAORd,G","file":"static/js/main.b654d4e4.chunk.js","sourcesContent":["import { TwitchPlayer } from 'react-twitch-embed';\n\nconst TwitchView = ({ isMuted }) => (\n\t<TwitchPlayer\n\t\tchannel='petepittawat'\n\t\twidth='100%'\n\t\theight='100%'\n\t\tmuted={isMuted}\n\t\thideControls={true}\n\t\tparent={['localhost']}\n\t/>\n);\n\nexport default TwitchView;\n","import './App.css';\n\nimport { useEffect, useState } from 'react';\n\nimport Swal from 'sweetalert2';\nimport withReactContent from 'sweetalert2-react-content';\n\nconst ENDPOINT_URL = 'https://staciiaz.live:8000/sentiment';\nconst MySwal = withReactContent(Swal);\n\nconst VoiceButton = ({ lang = 'en-US' }) => {\n\tconst [isListening, setIsListening] = useState(false);\n\tconst [isProcessing, setIsProcessing] = useState(false);\n\n\tconst [recognizer] = useState(\n\t\t(window.SpeechRecognition && new window.SpeechRecognition()) ||\n\t\t\t(window.webkitSpeechRecognition && new window.webkitSpeechRecognition())\n\t);\n\n\tuseEffect(() => {\n\t\trecognizer.onend = () => {\n\t\t\tsetIsListening(false);\n\t\t};\n\n\t\trecognizer.onresult = async (event) => {\n\t\t\tconst text = event.results[0][0].transcript;\n\t\t\tconsole.log(`Recognized text: ${text}`);\n\n\t\t\tsetIsProcessing(true);\n\t\t\ttry {\n\t\t\t\tconst response = await fetch(ENDPOINT_URL, {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\tmessage: text,\n\t\t\t\t\t}),\n\t\t\t\t});\n\t\t\t\tconst data = await response.json();\n\t\t\t\tMySwal.fire({\n\t\t\t\t\ttitle: <p>Your message was successfully recorded</p>,\n\t\t\t\t\ticon: 'success',\n\t\t\t\t\thtml: `<p>Text: \"${text}\"</p>`,\n\t\t\t\t});\n\t\t\t\tconsole.log(data);\n\t\t\t} catch (err) {\n\t\t\t\tMySwal.fire({\n\t\t\t\t\ttitle: <p>Something went wrong. Please try again later.</p>,\n\t\t\t\t\ticon: 'error',\n\t\t\t\t\thtml: `<p>Text: \"${text}\"</p>`,\n\t\t\t\t});\n\t\t\t\tconsole.log(err);\n\t\t\t} finally {\n\t\t\t\tsetIsProcessing(false);\n\t\t\t}\n\t\t};\n\t}, [recognizer]);\n\n\tconst onRecognize = () => {\n\t\tif (isListening === false) {\n\t\t\tsetIsListening(true);\n\t\t\trecognizer.lang = lang;\n\t\t\trecognizer.start();\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<button\n\t\t\t\tdisabled={isListening || isProcessing}\n\t\t\t\tonClick={onRecognize}\n\t\t\t\tclassName={\n\t\t\t\t\tisListening || isProcessing\n\t\t\t\t\t\t? 'record-button disabled'\n\t\t\t\t\t\t: 'record-button'\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t{isListening\n\t\t\t\t\t? 'Listening...'\n\t\t\t\t\t: isProcessing\n\t\t\t\t\t? 'Processing...'\n\t\t\t\t\t: 'Record'}\n\t\t\t</button>\n\t\t</div>\n\t);\n};\nexport default VoiceButton;\n","import './App.css';\n\nimport TwitchView from './TwitchView';\nimport VoiceButton from './VoiceComponent';\nimport { useState } from 'react';\n\nconst App = () => {\n\tconst [isMuted] = useState(true);\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<div className='Twitch-view'>\n\t\t\t\t<TwitchView isMuted={isMuted} />\n\t\t\t</div>\n\n\t\t\t<div className='User-interface'>\n\t\t\t\t<div className='Instruction'>\n\t\t\t\t\t<div className='Instruction-space' />\n\t\t\t\t\t<div className='Instruction-title'>\n\t\t\t\t\t\t<b>Instruction</b>\n\t\t\t\t\t</div>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tThe game will be automatically played by AI. By cheer/jeer with your\n\t\t\t\t\t\town voice, you can give advantages/disadvantages to Ms PAC-MAN\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tPress the <b>\"Record\"</b> button and cheer/jeer with your passionate\n\t\t\t\t\t\tvoice!\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div className='Record'>\n\t\t\t\t\t<VoiceButton />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}