{"version":3,"sources":["VoiceComponent.js","App.js","reportWebVitals.js","index.js"],"names":["VoiceComponent","props","recognise","setState","isListening","_recognizer","lang","state","start","handleTextChange","e","text","target","value","supported","autoPlay","Recognition","window","SpeechRecognition","webkitSpeechRecognition","this","console","log","disabled","onClick","className","Component","App","src","height","width","allowfullscreen","id","class","type","for","name","min","max","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"qOAqDeA,EAjDK,kDAElB,WAAYC,GAAQ,IAAD,EAOf,OAPe,qBACjB,cAAMA,IAsBTC,UAAY,WACT,EAAKC,SAAS,CAAEC,aAAa,IAC/B,EAAKC,YAAYC,KAAO,EAAKC,MAAMD,KACnC,EAAKD,YAAYG,QACf,EAAKL,SAAS,CAAEC,aAAa,GAChC,EAAC,EAEAK,iBAAmB,SAAAC,GACjB,EAAKP,SAAS,CAAEQ,KAAMD,EAAEE,OAAOC,OACjC,EA9BE,EAAKN,MAAQ,CACXO,WAAW,EACXR,KAAML,EAAMK,MAAQ,QACpBS,UAAU,EACVX,aAAa,GACb,CACJ,CAoCC,OApCA,+CAED,WACA,IAAMY,EAAcC,OAAOC,mBAAqBD,OAAOE,wBACrDC,KAAKf,YAAc,IAAIW,EAEzBK,QAAQC,IAAIF,KAAKf,YACjB,GAAC,+BAED,WACMe,KAAKb,MAAMO,WAAaM,KAAKb,MAAMQ,QAGzC,GAAC,oBAaD,WACE,MAA8BK,KAAKb,MAArBH,GAAF,EAAJO,KAAiB,EAAXP,aACd,OACE,gCACE,uBACA,wBAAQmB,SAAUnB,EAAaoB,QAASJ,KAAKlB,UAAWuB,UAAU,iBAAgB,SAAC,aAKzF,KAAC,EA9CiB,CAASC,aCyDdC,MAvDf,WAEE,OACE,sBAAKF,UAAU,MAAK,UACpB,qBAAKA,UAAU,cAAa,SAC5B,wBACGG,IAAI,uFACJC,OAAO,MACPC,MAAM,MACNC,iBAAe,MAIlB,sBAAKN,UAAU,iBAAgB,UAC7B,sBAAKA,UAAU,cAAa,UAC1B,qBAAKA,UAAU,sBACf,qBAAKA,UAAU,oBAAmB,SAAC,4BAAG,kBACtC,qBAAKA,UAAU,gBAAe,SAAC,yIAC/B,qBAAKA,UAAU,sBACf,sBAAKA,UAAU,gBAAe,UAAC,aAAU,4BAAG,aAAY,0DAE1D,sBAAKA,UAAU,iBAAgB,UAC7B,qBAAKA,UAAU,gBACf,qBAAKA,UAAU,cAAa,SAAC,4BAAG,qBAChC,sBAAKA,UAAU,cAAa,UAC1B,sBAAKA,UAAU,gBAAe,UAC1B,uBAAOO,GAAG,SAASC,MAAM,eAAeC,KAAK,aAC7C,uBAAOC,IAAI,SAASF,MAAM,oBAE9B,qBAAKR,UAAU,UAAS,SAAC,oCAE3B,qBAAKA,UAAU,eAAc,SAAC,WAC9B,sBAAKA,UAAU,gBAAe,UAC5B,8BAAK,MACH,uBAAOS,KAAK,QAAQE,KAAK,QAAQC,IAAI,IAAIC,IAAI,QAC/C,8BAAK,cAGT,sBAAKb,UAAU,aAAY,UACzB,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,mBAAkB,SAAC,4BAAG,iBACrC,+BACI,6BAAI,6CACJ,6BAAI,6CACJ,6BAAI,mDAGV,qBAAKA,UAAU,SAAQ,SACrB,cAAC,EAAc,WAKvB,EC/Cec,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJaQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,OAORd,G","file":"static/js/main.2acada1e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css';\n\n\nclass VoiceComponent extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      supported: true,\n      lang: props.lang || \"en-US\",\n      autoPlay: false,\n      isListening: false\n    };\n  }\n\n  componentWillMount() {\n\t\tconst Recognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    this._recognizer = new Recognition();\n\n\t\tconsole.log(this._recognizer);\n  }\n\n  componentDidMount() {\n    if (this.state.supported && this.state.autoPlay) {\n      // this.recognise();\n    }\n  }\n\n\trecognise = () => {\n    this.setState({ isListening: true });\n\t\tthis._recognizer.lang = this.state.lang;\n\t\tthis._recognizer.start();\n    this.setState({ isListening: false });\n\t}\n\n  handleTextChange = e => {\n    this.setState({ text: e.target.value });\n  };\n\n  render() {\n    const { text, isListening } = this.state;\n    return (\n      <div>\n        <br />\n        <button disabled={isListening} onClick={this.recognise} className=\"rounded-corner\">\n          Record\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default VoiceComponent;\n","import React, { Component }  from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport VoiceComponent from \"./VoiceComponent\";\nimport './App.css';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n\t\t  <div className=\"Twitch-view\">\n\t\t\t\t<iframe\n\t\t\t    src=\"https://player.twitch.tv/?channel=dep_ow&parent=game-ai-project.github.io&muted=true\"\n\t\t\t    height=\"720\"\n\t\t\t    width=\"720\"\n\t\t\t    allowfullscreen>\n\t\t\t\t</iframe>\n\t\t  </div>\n\t\t  \n\t\t  <div className=\"User-interface\">\n\t\t    <div className=\"Instruction\">\n\t\t      <div className=\"Instruction-space\" />\n\t\t      <div className=\"Instruction-title\"><b>Instruction</b></div>\n\t\t      <div className=\"Instruction-1\">The game will be automatically played by Al.By cheering/boo with your own voice, you can give advantages/disadvantages to Ms PAC-MAN</div>\n\t\t      <div className=\"Instruction-space\" />\n\t\t      <div className=\"Instruction-2\">Press the <b>\"Record\"</b> button and cheer/ooo with your passionate voicel</div>\n\t\t    </div>\n\t\t    <div className=\"Audio-settings\">\n\t\t      <div className=\"Audio-space\" />\n\t\t      <div className=\"Audio-title\"><b>Audio settings</b></div>\n\t\t      <div className=\"Audio-items\">\n\t\t        <div className=\"toggle_button\">\n              <input id=\"toggle\" class=\"toggle_input\" type='checkbox' />\n              <label for=\"toggle\" class=\"toggle_label\"/>\n            </div>\n\t\t        <div className=\"Audio-1\">Turn on/off background music</div>\n\t\t      </div>\n\t\t      <div className=\"Audio-volume\">Volume</div>\n\t\t      <div className=\"Volume-slider\">\n\t\t        <div>0</div>\n         \t  <input type=\"range\" name=\"speed\" min=\"0\" max=\"100\"/>\n\t\t        <div>100</div>\n\t\t      </div>\n\t\t    </div>\n\t\t    <div className=\"Action-log\">\n\t\t      <div className=\"Action-log-space\" />\n\t\t      <div className=\"Action-log-title\"><b>Action log</b></div>\n\t\t      <ul>\n            <li>18/11/2022 10:00:32 Ms. PAC-MAN Get Boo!</li>\n            <li>18/11/2022 10:00:32 Ms. PAC-MAN Get Boo!</li>\n            <li>18/11/2022 10:00:32 Ms. PAC-MAN Get Boo!</li>\n          </ul>\n\t\t    </div>\n\t\t    <div className=\"Record\">\n\t\t      <VoiceComponent />\n\t\t    </div>\n\t\t  </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}