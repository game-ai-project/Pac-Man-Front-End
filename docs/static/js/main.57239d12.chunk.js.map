{"version":3,"sources":["TwitchView.js","VoiceComponent.js","App.js","reportWebVitals.js","index.js"],"names":["TwitchView","props","channel","width","height","muted","this","hideControls","parent","Component","VoiceComponent","recognise","state","isListening","setState","_recognizer","lang","start","Recognition","window","SpeechRecognition","webkitSpeechRecognition","onend","event","onresult","text","results","transcript","console","log","fetch","method","headers","body","JSON","stringify","message","then","res","data","alert","catch","err","disabled","onClick","className","App","handleChange","id","type","onChange","htmlFor","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.57239d12.chunk.js","sourcesContent":["import React, { Component, useRef } from \"react\";\nimport { TwitchPlayer } from 'react-twitch-embed'\n\n\nclass TwitchView extends Component {\n\tconstructor(props) {\n    super(props);\n\n  }\n\n\trender() {\n  \treturn (\n\t\t\t\t<TwitchPlayer\n          channel=\"petepittawat\"\n          width=\"100%\"\n          height=\"100%\"\n\t\t\t\t\tmuted={this.props.muted}\n\t\t\t\t\thideControls={true}\n          parent={['codesandbox.io', 'localhost']}\n        />\n  \t);\n\t}\n}\n\nexport default TwitchView;\n","import './App.css';\n\nimport React, { Component } from 'react';\n\nclass VoiceComponent extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tlang: props.lang || 'en-US',\n\t\t\tisListening: false,\n\t\t};\n\t}\n\n\tcomponentWillMount() {\n\t\tconst Recognition =\n\t\t\twindow.SpeechRecognition || window.webkitSpeechRecognition;\n\n\t\tthis._recognizer = new Recognition();\n\n\t\tthis._recognizer.onend = (event) => {\n\t\t\tthis.setState({ isListening: false });\n\t\t};\n\n\t\tthis._recognizer.onresult = (event) => {\n\t\t\tconst text = event.results[0][0].transcript;\n\t\t\tconsole.log(text);\n\n\t\t\tfetch('http://20.194.195.200:8000/sentiment', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tmessage: text,\n\t\t\t\t}),\n\t\t\t})\n\t\t\t\t.then((res) => {\n\t\t\t\t})\n\t\t\t\t.then(data => {\n\t\t\t\t\talert(`Your message \"${text}\" was successfully recorded.`)\n\t\t\t\t\tconsole.log(data)\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\talert('Something went wrong. Please try again later.')\n\t\t\t\t\tconsole.log(err)\n\t\t\t\t});\n\t\t};\n\t}\n\n\trecognise = () => {\n\t\tif (this.state.isListening == false) {\n\t\t\tthis.setState({ isListening: true });\n\t\t\tthis._recognizer.lang = this.state.lang;\n\t\t\tthis._recognizer.start();\n\t\t}\n\t};\n\n\trender() {\n\t\tconst { isListening } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<br />\n\t\t\t\t<button\n\t\t\t\t\tdisabled={isListening}\n\t\t\t\t\tonClick={this.recognise}\n\t\t\t\t\tclassName='rounded-corner'\n\t\t\t\t>\n\t\t\t\t\t{isListening ? \"Listening...\" : \"Record\"}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default VoiceComponent;\n","import './App.css';\n\nimport React, { Component }  from 'react';\n\nimport TwitchView from \"./TwitchView\";\nimport VoiceComponent from \"./VoiceComponent\";\n\nclass App extends Component {\n\tconstructor(props) {\n    super(props);\n\n    this.state = {\n\t\t\tmuted: true\n    };\n\n  }\n\n\thandleChange = (event) => {\n\t\tif (this.state.muted == false) {\n\t\t\tthis.setState({muted: true})\n\t\t} else {\n\t\t\tthis.setState({muted: false})\n\t\t}\n\n\t}\n\n\n\trender() {\n\t\tconst { muted } = this.state;\n\n  \treturn (\n  \t  <div className=\"App\">\n\t\t\t  <div className=\"Twitch-view\">\n\t\t\t    <TwitchView muted={this.state.muted}/>\n\t\t\t  </div>\n\t\t\t  \n\t\t\t  <div className=\"User-interface\">\n\t\t\t    <div className=\"Instruction\">\n\t\t\t      <div className=\"Instruction-space\" />\n\t\t\t      <div className=\"Instruction-title\"><b>Instruction</b></div>\n\t\t\t      <div className=\"Instruction-1\">The game will be automatically played by AI. By cheer/jeer with your own voice, you can give advantages/disadvantages to Ms PAC-MAN</div>\n\t\t\t      <div className=\"Instruction-space\" />\n\t\t\t      <div className=\"Instruction-2\">Press the <b>\"Record\"</b> button and cheer/jeer with your passionate voice!</div>\n\t\t\t    </div>\n\t\t\t    <div className=\"Audio-settings\">\n\t\t\t      <div className=\"Audio-space\" />\n\t\t\t      <div className=\"Audio-title\"><b>Audio settings</b></div>\n\t\t\t      <div className=\"Audio-items\">\n\t\t\t        <div className=\"toggle_button\">\n  \t            <input id=\"toggle\" className=\"toggle_input\" type='checkbox' onChange={this.handleChange}/>\n  \t            <label htmlFor=\"toggle\" className=\"toggle_label\"/>\n  \t          </div>\n\t\t\t        <div className=\"Audio-1\">Turn on/off background music</div>\n\t\t\t      </div>\n\t\t\t    </div>\n\t\t\t    <div className=\"Record\">\n\t\t\t      <VoiceComponent />\n\t\t\t    </div>\n\t\t\t  </div>\n  \t  </div>\n\t\t)\n\t};\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}