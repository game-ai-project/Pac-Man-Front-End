{"ast":null,"code":"export class TwitchStream extends HTMLElement {\n  static TWITCH_EMBED_URL = 'https://embed.twitch.tv/js/embed/v1.js';\n  static get attributes() {\n    return {\n      channel: {},\n      width: {\n        default: 940\n      },\n      height: {\n        default: 480\n      },\n      theme: {\n        default: 'dark'\n      },\n      muted: {\n        default: false\n      },\n      autoplay: {\n        default: true\n      },\n      chat: {\n        default: false\n      },\n      allowfullscreen: {\n        default: true\n      },\n      parent: {\n        default: ''\n      }\n    };\n  }\n  constructor() {\n    super();\n    this.initialized = false;\n    this.attachShadow({\n      mode: 'open'\n    });\n  }\n  connectedCallback() {\n    this.setDefaults();\n    this.initializeTwitchEmbed();\n    this.render();\n  }\n  getPlayer() {\n    return this.embed ? this.embed.getPlayer() : null;\n  }\n  play() {\n    this.embed.play();\n  }\n  pause() {\n    this.embed.pause();\n  }\n  getChannel() {\n    return this.embed.getChannel();\n  }\n  setChannel(channel) {\n    this.setAttribute('channel', channel);\n    this.embed.setChannel(channel);\n  }\n  getQualities() {\n    return this.embed.getQualities();\n  }\n  setQuality(quality) {\n    const qualities = this.embed.getQualities().map(q => q.name);\n    if (!qualities.includes(quality)) {\n      throw Error(`Quality is not valid. Valid qualities are ${qualities.join(', ')}`);\n    }\n    this.embed.setQuality(quality);\n  }\n  getMuted() {\n    return this.embed.getMuted();\n  }\n  setMuted(muted) {\n    if (muted) {\n      this.setAttribute('muted', '');\n    } else {\n      this.removeAttribute('muted', '');\n    }\n    this.embed.setMuted(muted);\n  }\n  getVolume() {\n    return this.embed.getVolume();\n  }\n  setVolume(volume) {\n    this.embed.setVolume(volume);\n  }\n  async initializeTwitchEmbed() {\n    if (!window.Twitch) {\n      await this.importTwitch();\n    }\n    await this.newFrame();\n    let embedElem = this.shadowRoot.querySelector('#twitch-embed');\n    const embed = new Twitch.Embed(embedElem, {\n      width: this.width,\n      height: this.height,\n      channel: this.channel,\n      theme: this.theme,\n      muted: this.muted,\n      autoplay: this.autoplay,\n      layout: this.chat ? 'video-with-chat' : 'video',\n      allowfullscreen: this.allowfullscreen,\n      parent: this.parent\n    });\n    this.embed = embed;\n    this._setEmbedListeners();\n    this.initialized = true;\n  }\n  _setEmbedListeners() {\n    this.embed.addEventListener(Twitch.Embed.VIDEO_READY, () => {\n      this.dispatchEvent(new CustomEvent('twitch-stream.video.ready', {\n        detail: {\n          embed: this.embed\n        }\n      }));\n    });\n    this.embed.addEventListener(Twitch.Embed.VIDEO_PLAY, sessionId => {\n      this.dispatchEvent(new CustomEvent('twitch-stream.video.play', {\n        detail: {\n          embed: this.embed,\n          sessionId\n        }\n      }));\n    });\n    // Set all the callback events in a loop since we are just exposing them and no extra\n    // functionality is required\n    const events = ['ENDED', 'PAUSE', 'PLAY', 'PLAYBACK_BLOCKED', 'PLAYING', 'OFFLINE', 'ONLINE', 'READY'];\n    events.forEach(ev => {\n      this.embed.addEventListener(Twitch.Player[ev], async () => {\n        await this._handlePlayingState(ev);\n        this.dispatchEvent(new CustomEvent(`twitch-stream.${ev.toLowerCase()}`, {\n          detail: {\n            embed: this.embed\n          }\n        }));\n      });\n    });\n  }\n  async _handlePlayingState() {\n    await this.wait(50);\n    const isPaused = this.embed.isPaused();\n    if (isPaused) {\n      this.setAttribute('paused', '');\n      this.removeAttribute('playing');\n    } else {\n      this.setAttribute('playing', '');\n      this.removeAttribute('paused');\n    }\n  }\n  wait(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  newFrame() {\n    return new Promise(resolve => window.requestAnimationFrame(resolve));\n  }\n  _handleAttributeChange(attributeName) {\n    switch (attributeName) {\n      case 'channel':\n        this.setChannel(this.channel);\n        break;\n    }\n  }\n  importTwitch() {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = TwitchStream.TWITCH_EMBED_URL;\n      document.head.appendChild(script);\n      script.onload = resolve;\n      script.onerror = reject;\n    });\n  }\n  render() {\n    const content = TwitchStream.template.content.cloneNode(true);\n    this.shadowRoot.innerHTML = '';\n    this.shadowRoot.appendChild(content);\n  }\n  static get template() {\n    const template = document.createElement('template');\n    template.innerHTML = `<div id=\"twitch-embed\" style=\"height: 100%\"></div>`;\n    return template;\n  }\n  setDefaults() {\n    const attributes = TwitchStream.attributes;\n    Object.keys(attributes).forEach(attr => {\n      if (!this[attr]) {\n        this[attr] = attributes[attr].default;\n      }\n    });\n  }\n  attributeChangedCallback(name, oldValue, newValue) {\n    if (oldValue === newValue) return;\n    this[name] = newValue === '' ? true : newValue;\n    if (this.initialized) {\n      this._handleAttributeChange(name);\n    }\n  }\n  static get observedAttributes() {\n    const attributes = TwitchStream.attributes;\n    return Object.keys(attributes).filter(attr => {\n      return typeof attributes[attr].watch === 'undefined' || attributes[attr].watch;\n    });\n  }\n}\nif (!customElements.get('twitch-stream')) {\n  customElements.define('twitch-stream', TwitchStream);\n}","map":{"version":3,"names":["TwitchStream","HTMLElement","TWITCH_EMBED_URL","attributes","channel","width","default","height","theme","muted","autoplay","chat","allowfullscreen","parent","constructor","initialized","attachShadow","mode","connectedCallback","setDefaults","initializeTwitchEmbed","render","getPlayer","embed","play","pause","getChannel","setChannel","setAttribute","getQualities","setQuality","quality","qualities","map","q","name","includes","Error","join","getMuted","setMuted","removeAttribute","getVolume","setVolume","volume","window","Twitch","importTwitch","newFrame","embedElem","shadowRoot","querySelector","Embed","layout","_setEmbedListeners","addEventListener","VIDEO_READY","dispatchEvent","CustomEvent","detail","VIDEO_PLAY","sessionId","events","forEach","ev","Player","_handlePlayingState","toLowerCase","wait","isPaused","ms","Promise","resolve","setTimeout","requestAnimationFrame","_handleAttributeChange","attributeName","reject","script","document","createElement","src","head","appendChild","onload","onerror","content","template","cloneNode","innerHTML","Object","keys","attr","attributeChangedCallback","oldValue","newValue","observedAttributes","filter","watch","customElements","get","define"],"sources":["/Users/masakiito/Pac-Man-Front-End/node_modules/twitch-stream-embed/src/twitch-stream.js"],"sourcesContent":["export class TwitchStream extends HTMLElement {\n    static TWITCH_EMBED_URL = 'https://embed.twitch.tv/js/embed/v1.js';\n    static get attributes() {\n        return {\n            channel: {},\n            width: { default: 940 },\n            height: { default: 480 },\n            theme: { default: 'dark' },\n            muted: { default: false },\n            autoplay: { default: true },\n            chat: { default: false },\n            allowfullscreen: { default: true },\n            parent: { default: '' },\n        };\n    }\n\n    constructor() {\n        super();\n        this.initialized = false;\n        this.attachShadow({ mode: 'open' });\n    }\n\n    connectedCallback() {\n        this.setDefaults();\n        this.initializeTwitchEmbed();\n        this.render();\n    }\n\n    getPlayer() {\n        return this.embed ? this.embed.getPlayer() : null;\n    }\n\n    play() {\n        this.embed.play();\n    }\n\n    pause() {\n        this.embed.pause();\n    }\n\n    getChannel() {\n        return this.embed.getChannel();\n    }\n\n    setChannel(channel) {\n        this.setAttribute('channel', channel);\n        this.embed.setChannel(channel);\n    }\n\n    getQualities() {\n        return this.embed.getQualities();\n    }\n\n    setQuality(quality) {\n        const qualities = this.embed.getQualities().map(q => q.name);\n        if (!qualities.includes(quality)) {\n            throw Error(`Quality is not valid. Valid qualities are ${qualities.join(', ')}`);\n        }\n        this.embed.setQuality(quality);\n    }\n\n    getMuted() {\n        return this.embed.getMuted();\n    }\n\n    setMuted(muted) {\n        if (muted) {\n            this.setAttribute('muted', '');\n        } else {\n            this.removeAttribute('muted', '');\n        }\n        this.embed.setMuted(muted);\n    }\n\n    getVolume() {\n        return this.embed.getVolume();\n    }\n\n    setVolume(volume) {\n        this.embed.setVolume(volume);\n    }\n\n    async initializeTwitchEmbed() {\n        if (!window.Twitch) {\n            await this.importTwitch();\n        }\n        await this.newFrame();\n        let embedElem = this.shadowRoot.querySelector('#twitch-embed');\n        const embed = new Twitch.Embed(embedElem, {\n            width: this.width,\n            height: this.height,\n            channel: this.channel,\n            theme: this.theme,\n            muted: this.muted,\n            autoplay: this.autoplay,\n            layout: this.chat ? 'video-with-chat' : 'video',\n            allowfullscreen: this.allowfullscreen,\n            parent: this.parent,\n        });\n        this.embed = embed;\n\n        this._setEmbedListeners();\n        this.initialized = true;\n    }\n\n    _setEmbedListeners() {\n        this.embed.addEventListener(Twitch.Embed.VIDEO_READY, () => {\n            this.dispatchEvent(new CustomEvent('twitch-stream.video.ready', { detail: { embed: this.embed } }));\n        });\n        this.embed.addEventListener(Twitch.Embed.VIDEO_PLAY, sessionId => {\n            this.dispatchEvent(\n                new CustomEvent('twitch-stream.video.play', { detail: { embed: this.embed, sessionId } }),\n            );\n        });\n        // Set all the callback events in a loop since we are just exposing them and no extra\n        // functionality is required\n        const events = ['ENDED', 'PAUSE', 'PLAY', 'PLAYBACK_BLOCKED', 'PLAYING', 'OFFLINE', 'ONLINE', 'READY'];\n        events.forEach(ev => {\n            this.embed.addEventListener(Twitch.Player[ev], async () => {\n                await this._handlePlayingState(ev);\n                this.dispatchEvent(\n                    new CustomEvent(`twitch-stream.${ev.toLowerCase()}`, { detail: { embed: this.embed } }),\n                );\n            });\n        });\n    }\n\n    async _handlePlayingState() {\n        await this.wait(50);\n        const isPaused = this.embed.isPaused();\n        if (isPaused) {\n            this.setAttribute('paused', '');\n            this.removeAttribute('playing');\n        } else {\n            this.setAttribute('playing', '');\n            this.removeAttribute('paused');\n        }\n    }\n\n    wait(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    newFrame() {\n        return new Promise(resolve => window.requestAnimationFrame(resolve));\n    }\n\n    _handleAttributeChange(attributeName) {\n        switch (attributeName) {\n            case 'channel':\n                this.setChannel(this.channel);\n                break;\n        }\n    }\n\n    importTwitch() {\n        return new Promise((resolve, reject) => {\n            const script = document.createElement('script');\n            script.src = TwitchStream.TWITCH_EMBED_URL;\n            document.head.appendChild(script);\n\n            script.onload = resolve;\n            script.onerror = reject;\n        });\n    }\n\n    render() {\n        const content = TwitchStream.template.content.cloneNode(true);\n        this.shadowRoot.innerHTML = '';\n        this.shadowRoot.appendChild(content);\n    }\n\n    static get template() {\n        const template = document.createElement('template');\n        template.innerHTML = `<div id=\"twitch-embed\" style=\"height: 100%\"></div>`;\n        return template;\n    }\n\n    setDefaults() {\n        const attributes = TwitchStream.attributes;\n        Object.keys(attributes).forEach(attr => {\n            if (!this[attr]) {\n                this[attr] = attributes[attr].default;\n            }\n        });\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        if (oldValue === newValue) return;\n\n        this[name] = newValue === '' ? true : newValue;\n        if (this.initialized) {\n            this._handleAttributeChange(name);\n        }\n    }\n\n    static get observedAttributes() {\n        const attributes = TwitchStream.attributes;\n        return Object.keys(attributes).filter(attr => {\n            return typeof attributes[attr].watch === 'undefined' || attributes[attr].watch;\n        });\n    }\n}\n\nif (!customElements.get('twitch-stream')) {\n    customElements.define('twitch-stream', TwitchStream);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}